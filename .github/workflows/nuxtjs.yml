name: Deploy Nuxt site to Pages

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      # Ajuste selon ton cas: "/" pour user/org page ; "/<repo>/" pour project page
      NUXT_APP_BASE_URL: "/"
      NITRO_PRESET: "github_pages"
      NODE_OPTIONS: "--max_old_space_size=4096"
      CI: "true"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Detect package manager
        id: pm
        run: |
          if [ -f "${{ github.workspace }}/pnpm-lock.yaml" ]; then
            echo "manager=pnpm" >> $GITHUB_OUTPUT
            echo "install=install --frozen-lockfile" >> $GITHUB_OUTPUT
          elif [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "install=install --frozen-lockfile --production=false" >> $GITHUB_OUTPUT
          else
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "install=ci --include=dev" >> $GITHUB_OUTPUT
          fi

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ steps.pm.outputs.manager }}

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Install dependencies (include dev for build tools)
        run: ${{ steps.pm.outputs.manager }} ${{ steps.pm.outputs.install }}

      - name: Build (Nuxt SSG)
        run: |
          if [ "${{ steps.pm.outputs.manager }}" = "pnpm" ]; then pnpm generate;
          elif [ "${{ steps.pm.outputs.manager }}" = "yarn" ]; then yarn generate;
          else npm run generate; fi

      # Détecte le dossier de sortie: Nuxt peut écrire dans .output/public ou dist selon la config
      - name: Determine publish dir
        id: pub
        shell: bash
        run: |
          if [ -d "dist" ]; then
            echo "publish_dir=dist" >> $GITHUB_OUTPUT
          elif [ -d ".output/public" ]; then
            echo "publish_dir=.output/public" >> $GITHUB_OUTPUT
          else
            echo "::error::No static output folder found (dist or .output/public). Check your build step."
            exit 1
          fi
          echo "Using publish dir: $(cat $GITHUB_OUTPUT | sed -n 's/^publish_dir=//p')"

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ steps.pub.outputs.publish_dir }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
