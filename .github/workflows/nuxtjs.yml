name: Deploy Nuxt site to GitHub Pages

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      NUXT_APP_BASE_URL: "/portfolio/"
      NITRO_PRESET: github_pages
      NODE_OPTIONS: --max_old_space_size=4096
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect package manager
        id: pm
        run: |
          if [ -f "${{ github.workspace }}/pnpm-lock.yaml" ]; then
            echo "manager=pnpm" >> $GITHUB_OUTPUT
            echo "install=install --frozen-lockfile" >> $GITHUB_OUTPUT
          elif [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "install=install --frozen-lockfile" >> $GITHUB_OUTPUT
          elif [ -f "${{ github.workspace }}/package-lock.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "install=ci" >> $GITHUB_OUTPUT
          else
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "install=ci" >> $GITHUB_OUTPUT

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ steps.pm.outputs.manager }}
          cache-dependency-path: |
            **/pnpm-lock.yaml
            **/yarn.lock
            **/package-lock.json

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5

      - name: Restore build cache
        uses: actions/cache@v4
        with:
          path: |
            .nuxt
            node_modules
          key: ${{ runner.os }}-nuxt-${{ steps.pm.outputs.manager }}-${{ hashFiles('**/pnpm-lock.yaml', '**/yarn.lock', '**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuxt-${{ steps.pm.outputs.manager }}-

      - name: Install dependencies
        run: ${{ steps.pm.outputs.manager }} ${{ steps.pm.outputs.install }}

      - name: Build (Nuxt SSG)
        run: |
          if [ "${{ steps.pm.outputs.manager }}" = "pnpm" ]; then pnpm generate;
          elif [ "${{ steps.pm.outputs.manager }}" = "yarn" ]; then yarn generate;
          else npm run generate; fi

      # (Optionnel) Garde cette étape si tu veux valider que ta CSS globale est bien packagée
      # - name: Verify global CSS is present
      #   run: |
      #     ls -al dist/_nuxt/*.css || true
      #     grep -R ".section-container" dist/_nuxt/*.css || (echo "::error::Global CSS not found in bundle"; exit 1)

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
